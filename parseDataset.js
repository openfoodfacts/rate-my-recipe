const fs = require("fs");

const TITLE_LINE = 3;

const parseLine = (line) =>
  line.split("\t").map((cell) => cell.replace("\r", ""));

const content = fs.readFileSync("dataset.tsv", "utf8");

const lines = content.split("\n");

/**
 * Uncomment those lines to get the COLUMNS object from the line "TITLE_LINE"
 */
console.log("const COLUMNS = {");
parseLine(lines[TITLE_LINE]).forEach((columnTitle, columnIndex) => {
  console.log(`${columnIndex}: "${columnTitle}",`);
});
console.log("}");

// Generated by the script before
const COLUMNS = {
  0: "category_name",
  1: "category_id",
  2: "category_description",
  3: "ingredient_name",
  4: "ingredient_id",
  5: "ingredient_description",
  6: "ingredient_preparation",
  7: "ingredient_health",
  8: "ingredient_environment",
  9: "quantity_name",
  10: "quantity_api_name",
  11: "quantity_id",
  12: "quantity_default_weight",
  13: "quantity_default_weight_per_unit",
  14: "quantity_default_number_of_units",
  15: "quantity_image_url",
};

// Level of depths (end excluded)
const categoriesRange = [0, 3];
const ingredientsRange = [3, 9];
const quantitiesRange = [9, 15];

const createObject = (line) => {
  const rep = {};
  line.forEach((value, colIndex) => {
    if (value !== "") {
      rep[COLUMNS[colIndex]] = value;
    }
  });
  return rep;
};

const data = {
  categories: {},
  ingredients: {},
  quantities: {},
};

let currentState = {};
lines.slice(TITLE_LINE + 1).forEach((line) => {
  const parsedLine = parseLine(line);

  const lineObject = createObject(parsedLine);

  const isNewCategory = parsedLine
    .slice(...categoriesRange)
    .some((cell) => cell !== "");
  const isNewIngredient = parsedLine
    .slice(...ingredientsRange)
    .some((cell) => cell !== "");
  const isNewQuantity = parsedLine
    .slice(...quantitiesRange)
    .some((cell) => cell !== "");

  if (isNewCategory) {
    currentState = { category_id: lineObject.category_id };
    data.categories[lineObject.category_id] = {
      ...lineObject,
      ingredients: [],
    };
    return;
  }
  if (isNewIngredient) {
    currentState = {
      category_id: currentState.category_id,
      ingredient_id: lineObject.ingredient_id,
    };
    data.categories[currentState.category_id].ingredients.push(
      lineObject.ingredient_id
    );
    data.ingredients[lineObject.ingredient_id] = {
      ...lineObject,
      ...currentState,
      quantities: [],
    };
    return;
  }
  if (isNewQuantity) {
    data.ingredients[currentState.ingredient_id].quantities.push(
      lineObject.quantity_id
    );
    data.quantities[lineObject.quantity_id] = {
      ...lineObject,
      ...currentState,
    };
    return;
  }
});

fs.writeFile(
  "./data/ingredient_taxonomy.json",
  JSON.stringify(data, null, 2),
  (err) => {
    if (err) {
      console.error(err);
    }
    console.log("file updated");
  }
);
